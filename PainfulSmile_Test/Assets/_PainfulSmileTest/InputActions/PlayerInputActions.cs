//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/00_PainfulSmileTest/InputActions/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""MovementMap"",
            ""id"": ""d87b1d11-743f-4f8c-8ca7-c9e52a2913fb"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""61a05bb0-a986-4d96-ac2c-0be10d377411"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d3fabde7-8811-4002-bfb5-836aed9cb371"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""85b59a77-7449-40a6-9eb7-4c6b6be3cacf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""RotationMap"",
            ""id"": ""14665c2d-22fe-4873-ab06-d7173e03ec3f"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ab8dd8f9-c0e5-4a93-ac89-589c751d46c1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""71bd6e11-cdab-4e65-b583-8e17f35a0bfb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""53619638-37f4-4c97-b488-5a587eed01f1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ae8835f7-1bff-4cdb-acc6-4943cfc2ef38"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""AttackMap"",
            ""id"": ""53e6a625-360c-42b0-823f-86fe3e8b6418"",
            ""actions"": [
                {
                    ""name"": ""AttackSingleShoot"",
                    ""type"": ""Button"",
                    ""id"": ""052b0403-d90f-498f-bdef-a59f2df7460e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackMultipleShoot"",
                    ""type"": ""Button"",
                    ""id"": ""209c0c32-6d04-469e-a6a8-fdf9969f962d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""023916b8-e3ac-4e3a-89aa-390a18844694"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackSingleShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""934afb01-1b4d-49c7-8c0e-5c0b9cd1bfc0"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackMultipleShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementMap
        m_MovementMap = asset.FindActionMap("MovementMap", throwIfNotFound: true);
        m_MovementMap_Movement = m_MovementMap.FindAction("Movement", throwIfNotFound: true);
        // RotationMap
        m_RotationMap = asset.FindActionMap("RotationMap", throwIfNotFound: true);
        m_RotationMap_Rotation = m_RotationMap.FindAction("Rotation", throwIfNotFound: true);
        // AttackMap
        m_AttackMap = asset.FindActionMap("AttackMap", throwIfNotFound: true);
        m_AttackMap_AttackSingleShoot = m_AttackMap.FindAction("AttackSingleShoot", throwIfNotFound: true);
        m_AttackMap_AttackMultipleShoot = m_AttackMap.FindAction("AttackMultipleShoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementMap
    private readonly InputActionMap m_MovementMap;
    private List<IMovementMapActions> m_MovementMapActionsCallbackInterfaces = new List<IMovementMapActions>();
    private readonly InputAction m_MovementMap_Movement;
    public struct MovementMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public MovementMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MovementMap_Movement;
        public InputActionMap Get() { return m_Wrapper.m_MovementMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementMapActions set) { return set.Get(); }
        public void AddCallbacks(IMovementMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IMovementMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IMovementMapActions instance)
        {
            if (m_Wrapper.m_MovementMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementMapActions @MovementMap => new MovementMapActions(this);

    // RotationMap
    private readonly InputActionMap m_RotationMap;
    private List<IRotationMapActions> m_RotationMapActionsCallbackInterfaces = new List<IRotationMapActions>();
    private readonly InputAction m_RotationMap_Rotation;
    public struct RotationMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public RotationMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_RotationMap_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_RotationMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotationMapActions set) { return set.Get(); }
        public void AddCallbacks(IRotationMapActions instance)
        {
            if (instance == null || m_Wrapper.m_RotationMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotationMapActionsCallbackInterfaces.Add(instance);
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(IRotationMapActions instance)
        {
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(IRotationMapActions instance)
        {
            if (m_Wrapper.m_RotationMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotationMapActions instance)
        {
            foreach (var item in m_Wrapper.m_RotationMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotationMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotationMapActions @RotationMap => new RotationMapActions(this);

    // AttackMap
    private readonly InputActionMap m_AttackMap;
    private List<IAttackMapActions> m_AttackMapActionsCallbackInterfaces = new List<IAttackMapActions>();
    private readonly InputAction m_AttackMap_AttackSingleShoot;
    private readonly InputAction m_AttackMap_AttackMultipleShoot;
    public struct AttackMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public AttackMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @AttackSingleShoot => m_Wrapper.m_AttackMap_AttackSingleShoot;
        public InputAction @AttackMultipleShoot => m_Wrapper.m_AttackMap_AttackMultipleShoot;
        public InputActionMap Get() { return m_Wrapper.m_AttackMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackMapActions set) { return set.Get(); }
        public void AddCallbacks(IAttackMapActions instance)
        {
            if (instance == null || m_Wrapper.m_AttackMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AttackMapActionsCallbackInterfaces.Add(instance);
            @AttackSingleShoot.started += instance.OnAttackSingleShoot;
            @AttackSingleShoot.performed += instance.OnAttackSingleShoot;
            @AttackSingleShoot.canceled += instance.OnAttackSingleShoot;
            @AttackMultipleShoot.started += instance.OnAttackMultipleShoot;
            @AttackMultipleShoot.performed += instance.OnAttackMultipleShoot;
            @AttackMultipleShoot.canceled += instance.OnAttackMultipleShoot;
        }

        private void UnregisterCallbacks(IAttackMapActions instance)
        {
            @AttackSingleShoot.started -= instance.OnAttackSingleShoot;
            @AttackSingleShoot.performed -= instance.OnAttackSingleShoot;
            @AttackSingleShoot.canceled -= instance.OnAttackSingleShoot;
            @AttackMultipleShoot.started -= instance.OnAttackMultipleShoot;
            @AttackMultipleShoot.performed -= instance.OnAttackMultipleShoot;
            @AttackMultipleShoot.canceled -= instance.OnAttackMultipleShoot;
        }

        public void RemoveCallbacks(IAttackMapActions instance)
        {
            if (m_Wrapper.m_AttackMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAttackMapActions instance)
        {
            foreach (var item in m_Wrapper.m_AttackMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AttackMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AttackMapActions @AttackMap => new AttackMapActions(this);
    public interface IMovementMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IRotationMapActions
    {
        void OnRotation(InputAction.CallbackContext context);
    }
    public interface IAttackMapActions
    {
        void OnAttackSingleShoot(InputAction.CallbackContext context);
        void OnAttackMultipleShoot(InputAction.CallbackContext context);
    }
}
